/*
 * Please do not edit this file.
 * It was generated using rpcgen.
 */

#ifndef _CALCULADORA_H_RPCGEN
#define _CALCULADORA_H_RPCGEN

#include <rpc/rpc.h>


#ifdef __cplusplus
extern "C" {
#endif


typedef struct {
	u_int miArray_len;
	float *miArray_val;
} miArray;

struct suma_1_argument {
	double arg1;
	double arg2;
};
typedef struct suma_1_argument suma_1_argument;

struct resta_1_argument {
	double arg1;
	double arg2;
};
typedef struct resta_1_argument resta_1_argument;

struct multiplicacion_1_argument {
	double arg1;
	double arg2;
};
typedef struct multiplicacion_1_argument multiplicacion_1_argument;

struct division_1_argument {
	double arg1;
	double arg2;
};
typedef struct division_1_argument division_1_argument;

struct potencia_1_argument {
	double arg1;
	double arg2;
};
typedef struct potencia_1_argument potencia_1_argument;

struct suma_v_2_argument {
	miArray arg1;
	miArray arg2;
};
typedef struct suma_v_2_argument suma_v_2_argument;

struct resta_v_2_argument {
	miArray arg1;
	miArray arg2;
};
typedef struct resta_v_2_argument resta_v_2_argument;

struct product_v_2_argument {
	miArray arg1;
	miArray arg2;
};
typedef struct product_v_2_argument product_v_2_argument;

struct product_escalar_2_argument {
	miArray arg1;
	miArray arg2;
};
typedef struct product_escalar_2_argument product_escalar_2_argument;

#define CALCULADORA 0x20000001
#define CALC_BASIC 1

#if defined(__STDC__) || defined(__cplusplus)
#define suma 1
extern  double * suma_1(double , double , CLIENT *);
extern  double * suma_1_svc(double , double , struct svc_req *);
#define resta 2
extern  double * resta_1(double , double , CLIENT *);
extern  double * resta_1_svc(double , double , struct svc_req *);
#define multiplicacion 3
extern  double * multiplicacion_1(double , double , CLIENT *);
extern  double * multiplicacion_1_svc(double , double , struct svc_req *);
#define division 4
extern  double * division_1(double , double , CLIENT *);
extern  double * division_1_svc(double , double , struct svc_req *);
#define potencia 5
extern  double * potencia_1(double , double , CLIENT *);
extern  double * potencia_1_svc(double , double , struct svc_req *);
extern int calculadora_1_freeresult (SVCXPRT *, xdrproc_t, caddr_t);

#else /* K&R C */
#define suma 1
extern  double * suma_1();
extern  double * suma_1_svc();
#define resta 2
extern  double * resta_1();
extern  double * resta_1_svc();
#define multiplicacion 3
extern  double * multiplicacion_1();
extern  double * multiplicacion_1_svc();
#define division 4
extern  double * division_1();
extern  double * division_1_svc();
#define potencia 5
extern  double * potencia_1();
extern  double * potencia_1_svc();
extern int calculadora_1_freeresult ();
#endif /* K&R C */
#define CALC_COMP 2

#if defined(__STDC__) || defined(__cplusplus)
#define fibonacci 1
extern  miArray * fibonacci_2(int , CLIENT *);
extern  miArray * fibonacci_2_svc(int , struct svc_req *);
#define suma_v 2
extern  miArray * suma_v_2(miArray , miArray , CLIENT *);
extern  miArray * suma_v_2_svc(miArray , miArray , struct svc_req *);
#define resta_v 3
extern  miArray * resta_v_2(miArray , miArray , CLIENT *);
extern  miArray * resta_v_2_svc(miArray , miArray , struct svc_req *);
#define product_v 4
extern  miArray * product_v_2(miArray , miArray , CLIENT *);
extern  miArray * product_v_2_svc(miArray , miArray , struct svc_req *);
#define product_escalar 5
extern  int * product_escalar_2(miArray , miArray , CLIENT *);
extern  int * product_escalar_2_svc(miArray , miArray , struct svc_req *);
#define media_aritmetica 6
extern  float * media_aritmetica_2(miArray , CLIENT *);
extern  float * media_aritmetica_2_svc(miArray , struct svc_req *);
extern int calculadora_2_freeresult (SVCXPRT *, xdrproc_t, caddr_t);

#else /* K&R C */
#define fibonacci 1
extern  miArray * fibonacci_2();
extern  miArray * fibonacci_2_svc();
#define suma_v 2
extern  miArray * suma_v_2();
extern  miArray * suma_v_2_svc();
#define resta_v 3
extern  miArray * resta_v_2();
extern  miArray * resta_v_2_svc();
#define product_v 4
extern  miArray * product_v_2();
extern  miArray * product_v_2_svc();
#define product_escalar 5
extern  int * product_escalar_2();
extern  int * product_escalar_2_svc();
#define media_aritmetica 6
extern  float * media_aritmetica_2();
extern  float * media_aritmetica_2_svc();
extern int calculadora_2_freeresult ();
#endif /* K&R C */

/* the xdr functions */

#if defined(__STDC__) || defined(__cplusplus)
extern  bool_t xdr_miArray (XDR *, miArray*);
extern  bool_t xdr_suma_1_argument (XDR *, suma_1_argument*);
extern  bool_t xdr_resta_1_argument (XDR *, resta_1_argument*);
extern  bool_t xdr_multiplicacion_1_argument (XDR *, multiplicacion_1_argument*);
extern  bool_t xdr_division_1_argument (XDR *, division_1_argument*);
extern  bool_t xdr_potencia_1_argument (XDR *, potencia_1_argument*);
extern  bool_t xdr_suma_v_2_argument (XDR *, suma_v_2_argument*);
extern  bool_t xdr_resta_v_2_argument (XDR *, resta_v_2_argument*);
extern  bool_t xdr_product_v_2_argument (XDR *, product_v_2_argument*);
extern  bool_t xdr_product_escalar_2_argument (XDR *, product_escalar_2_argument*);

#else /* K&R C */
extern bool_t xdr_miArray ();
extern bool_t xdr_suma_1_argument ();
extern bool_t xdr_resta_1_argument ();
extern bool_t xdr_multiplicacion_1_argument ();
extern bool_t xdr_division_1_argument ();
extern bool_t xdr_potencia_1_argument ();
extern bool_t xdr_suma_v_2_argument ();
extern bool_t xdr_resta_v_2_argument ();
extern bool_t xdr_product_v_2_argument ();
extern bool_t xdr_product_escalar_2_argument ();

#endif /* K&R C */

#ifdef __cplusplus
}
#endif

#endif /* !_CALCULADORA_H_RPCGEN */
